import requests
from termcolor import colored

def get_weather(city):
    # –ì–µ–æ–∫–æ–¥—É–≤–∞–Ω–Ω—è –º—ñ—Å—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    geocode_url = f"https://geocode.maps.co/search?q={city},Ukraine&format=json"
    response = requests.get(geocode_url)
    if response.status_code != 200 or not response.json():
        print(colored(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –º—ñ—Å—Ç–æ: {city}", 'red'))
        return

    location = response.json()[0]
    lat, lon = location['lat'], location['lon']

    # –ó–∞–ø–∏—Ç –¥–æ Open-Meteo API –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É –Ω–∞ 7 –¥–Ω—ñ–≤
    weather_url = f"https://api.open-meteo.com/v1/forecast?latitude={lat}&longitude={lon}&daily=temperature_2m_max,temperature_2m_min,precipitation_sum&temperature_unit=celsius&precipitation_unit=mm&timezone=Europe/Kiev"
    weather_response = requests.get(weather_url)
    if weather_response.status_code != 200:
        print(colored("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É.", 'red'))
        return

    weather_data = weather_response.json()
    print(colored(f"\n–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥–∏ –Ω–∞ 7 –¥–Ω—ñ–≤ –¥–ª—è –º—ñ—Å—Ç–∞ {city.capitalize()}:", 'cyan'))
    for i, day in enumerate(weather_data['daily']['time']):
        date = day
        max_temp = weather_data['daily']['temperature_2m_max'][i]
        min_temp = weather_data['daily']['temperature_2m_min'][i]
        precip = weather_data['daily']['precipitation_sum'][i]
        print(colored(f"{date}: –ú–∞–∫—Å. {max_temp}¬∞C, –ú—ñ–Ω. {min_temp}¬∞C, –û–ø–∞–¥–∏: {precip} –º–º", 'green'))

if __name__ == '__main__':
    print(colored("üå§Ô∏è –ü–æ–≥–æ–¥–Ω–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Termux", 'yellow'))
    city = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞: ")
    get_weather(city)
